(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{54:function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));const i=class{constructor(e,t,r,i){this.token=e,this.texto=t,this.location=r,this.hijos=i,this.indice=0}generarIndices(e){window.indices=window.indices+1,e instanceof i&&(e.indice=window.indices);for(let t=0;t<e.hijos.length;t++)e.hijos[t]instanceof i&&this.generarIndices(e.hijos[t])}graficarArbol(){window.indices=0,this.generarIndices(this),window.strArbol="",window.strArbol+="Digraph G{\n",window.strArbol+="graph [ranksep=2]\n node[shape=record,height=.1,style=filled];\n",null!=this&&this.grafNodos(),window.strArbol+="}"}grafNodos(){if(this instanceof i){window.strArbol+="node"+this.indice+'[label = "'+this.texto.replace(">","\\>").replace("<","\\<")+'",fillcolor="green"];\n';for(let e=0;e<this.hijos.length;e++)this.hijos[e]instanceof i&&(this.hijos[e].grafNodos(),window.strArbol+="node"+this.indice+"->node"+this.hijos[e].indice+";\n")}}getToken(){return this.token}}},55:function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));var i=r(8);class s extends i.a{shouldUpdate(){return this.active}static get styles(){return[i.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          background: var(--light-secondary-color);
        }
      `]}static get properties(){return{active:{type:Boolean}}}}},56:function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));const i=class{constructor(e,t,r,i){this.descripcion=t,this.fila=r,this.columna=i,this.tipo=e}getDescripcion(){return this.descripcion}getLinea(){return this.fila}getColumna(){return this.columna}getTipo(){return this.tipo}}},66:function(e,t){window.indices=0,window.strArbol="",window.textoConsola=[],window.errores=[],window.limpiarTodo=function(){window.indices=0,window.strArbol="",window.errores=[],window.textoConsola=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:[]}))}},67:function(e,t,r){"use strict";(function(e,i){r.d(t,"a",(function(){return a}));r(54);var s=r(70),o=r(71),n=r(72),a=function(){var e=function(e,t,r,i){for(r=r||{},i=e.length;i--;r[e[i]]=t);return r},t=[1,16],r=[1,12],i=[1,10],a=[1,11],l=[1,13],c=[1,14],h=[1,15],d=[1,22],p=[1,23],u=[11,13,14,15,16,17,18],g=[1,24],b=[1,25],m=[1,26],y=[1,27],f=[1,28],w=[1,29],v=[11,13,14,15,16,17,18,20,21,22,23,24,25],x=[11,13,14,15,16],k=[11,13,14,15,16,17,18,20,21],C=[11,13,14,15,16,17,18,20,21,22,24],_={trace:function(){},yy:{},symbols_:{error:2,INICIO:3,IMPRIMIR:4,EOF:5,console:6,punto:7,log:8,parentesisabre:9,REL:10,parentesiscierra:11,puntoycoma:12,mayor:13,menor:14,menoroigual:15,mayoroigual:16,igualigual:17,diferente:18,EXP:19,"+":20,"-":21,"*":22,potencia:23,"/":24,"%":25,ENTERO:26,DECIMAL:27,e:28,CADENA:29,verdadero:30,falso:31,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",6:"console",7:"punto",8:"log",9:"parentesisabre",11:"parentesiscierra",12:"puntoycoma",13:"mayor",14:"menor",15:"menoroigual",16:"mayoroigual",17:"igualigual",18:"diferente",20:"+",21:"-",22:"*",23:"potencia",24:"/",25:"%",26:"ENTERO",27:"DECIMAL",28:"e",29:"CADENA",30:"verdadero",31:"falso"},productions_:[0,[3,2],[4,7],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,2],[19,1],[19,1],[19,1],[19,3]],performAction:function(e,t,r,i,a,l,c){var h=l.length-1;switch(a){case 1:return l[h-1];case 2:this.$=new n.a("imprimir","PRINT",c[h-6],[l[h-2]]);break;case 3:this.$=new o.a("MAYOR",">",c[h-2],[l[h-2],l[h]]);break;case 4:this.$=new o.a("MENOR","<",c[h-2],[l[h-2],l[h]]);break;case 5:this.$=new o.a("MENOROIGUAL","<=",c[h-2],[l[h-2],l[h]]);break;case 6:this.$=new o.a("MAYOROIGUAL",">=",c[h-2],[l[h-2],l[h]]);break;case 7:this.$=new o.a("IGUALIGUAL","==",c[h-2],[l[h-2],l[h]]);break;case 8:this.$=new o.a("DIFERENTE","!=",c[h-2],[l[h-2],l[h]]);break;case 9:this.$=l[h];break;case 10:this.$=new s.a("MAS","+",c[h-2],[l[h-2],l[h]]);break;case 11:this.$=new s.a("MENOS","-",c[h-2],[l[h-2],l[h]]);break;case 12:this.$=new s.a("POR","*",c[h-2],[l[h-2],l[h]]);break;case 13:this.$=new s.a("POTENCIA","**",c[h-2],[l[h-2],l[h]]);break;case 14:this.$=new s.a("DIV","/",c[h-2],[l[h-2],l[h]]);break;case 15:this.$=new s.a("MODULO","%",c[h-2],[l[h-2],l[h]]);break;case 16:case 17:this.$=new s.a("NUMERICO",e,c[h],[]);break;case 18:this.$=new s.a("NEGADO","-",c[h-1],[l[h]]);break;case 19:this.$=new s.a("STRING",e.split('\\"').join('"').split("\\t").join("\n").split("\\n").join("\n").split("\\\\").join("\\").split("\\r").join("\r"),c[h],[]);break;case 20:this.$=new s.a("BOOLEAN","true",c[h],[]);break;case 21:this.$=new s.a("BOOLEAN","false",c[h],[]);break;case 22:this.$=l[h-1]}},table:[{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:[1,5]},{1:[2,1]},{8:[1,6]},{9:[1,7]},{9:t,10:8,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{11:[1,17],13:[1,18],14:[1,19],15:[1,20],16:[1,21],17:d,18:p},e(u,[2,9],{20:g,21:b,22:m,23:y,24:f,25:w}),e(v,[2,16]),e(v,[2,17]),{28:[1,30]},e(v,[2,19]),e(v,[2,20]),e(v,[2,21]),{9:t,19:31,21:r,26:i,27:a,29:l,30:c,31:h},{12:[1,32]},{9:t,10:33,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,10:34,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,10:35,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,10:36,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,10:37,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,10:38,19:9,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:39,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:40,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:41,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:42,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:43,21:r,26:i,27:a,29:l,30:c,31:h},{9:t,19:44,21:r,26:i,27:a,29:l,30:c,31:h},e(v,[2,18]),{11:[1,45],20:g,21:b,22:m,23:y,24:f,25:w},{5:[2,2]},e(x,[2,3],{17:d,18:p}),e(x,[2,4],{17:d,18:p}),e(x,[2,5],{17:d,18:p}),e(x,[2,6],{17:d,18:p}),e(u,[2,7]),e(u,[2,8]),e(k,[2,10],{22:m,23:y,24:f,25:w}),e(k,[2,11],{22:m,23:y,24:f,25:w}),e(C,[2,12],{23:y,25:w}),e(v,[2,13]),e(C,[2,14],{23:y,25:w}),e(v,[2,15]),e(v,[2,22])],defaultActions:{4:[2,1],32:[2,2]},parseError:function(e,t){if(!t.recoverable){var r=new Error(e);throw r.hash=t,r}this.trace(e)},parse:function(e){var t=this,r=[0],i=[null],s=[],o=this.table,n="",a=0,l=0,c=0,h=2,d=1,p=s.slice.call(arguments,1),u=Object.create(this.lexer),g={yy:{}};for(var b in this.yy)Object.prototype.hasOwnProperty.call(this.yy,b)&&(g.yy[b]=this.yy[b]);u.setInput(e,g.yy),g.yy.lexer=u,g.yy.parser=this,void 0===u.yylloc&&(u.yylloc={});var m=u.yylloc;s.push(m);var y=u.options&&u.options.ranges;"function"==typeof g.yy.parseError?this.parseError=g.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var f,w,v,x,k,C,_,$,E,S=function(){var e;return"number"!=typeof(e=u.lex()||d)&&(e=t.symbols_[e]||e),e},M={};;){if(v=r[r.length-1],this.defaultActions[v]?x=this.defaultActions[v]:(null==f&&(f=S()),x=o[v]&&o[v][f]),void 0===x||!x.length||!x[0]){var A="";for(C in E=[],o[v])this.terminals_[C]&&C>h&&E.push("'"+this.terminals_[C]+"'");A=u.showPosition?"Parse error on line "+(a+1)+":\n"+u.showPosition()+"\nExpecting "+E.join(", ")+", got '"+(this.terminals_[f]||f)+"'":"Parse error on line "+(a+1)+": Unexpected "+(f==d?"end of input":"'"+(this.terminals_[f]||f)+"'"),this.parseError(A,{text:u.match,token:this.terminals_[f]||f,line:u.yylineno,loc:m,expected:E})}if(x[0]instanceof Array&&x.length>1)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+f);switch(x[0]){case 1:r.push(f),i.push(u.yytext),s.push(u.yylloc),r.push(x[1]),f=null,w?(f=w,w=null):(l=u.yyleng,n=u.yytext,a=u.yylineno,m=u.yylloc,c>0&&c--);break;case 2:if(_=this.productions_[x[1]][1],M.$=i[i.length-_],M._$={first_line:s[s.length-(_||1)].first_line,last_line:s[s.length-1].last_line,first_column:s[s.length-(_||1)].first_column,last_column:s[s.length-1].last_column},y&&(M._$.range=[s[s.length-(_||1)].range[0],s[s.length-1].range[1]]),void 0!==(k=this.performAction.apply(M,[n,l,a,g.yy,x[1],i,s].concat(p))))return k;_&&(r=r.slice(0,-1*_*2),i=i.slice(0,-1*_),s=s.slice(0,-1*_)),r.push(this.productions_[x[1]][0]),i.push(M.$),s.push(M._$),$=o[r[r.length-2]][r[r.length-1]],r.push($);break;case 3:return!0}}return!0},treeparser:{raiz:null},error:{error:[]}},$={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,r=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var i=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),r.length-1&&(this.yylineno-=r.length-1);var s=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:r?(r.length===i.length?this.yylloc.first_column:0)+i[i.length-r.length].length-r[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[s[0],s[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var r,i,s;if(this.options.backtrack_lexer&&(s={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(s.yylloc.range=this.yylloc.range.slice(0))),(i=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],r=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),r)return r;if(this._backtrack){for(var o in s)this[o]=s[o];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,r,i;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),o=0;o<s.length;o++)if((r=this._input.match(this.rules[s[o]]))&&(!t||r[0].length>t[0].length)){if(t=r,i=o,this.options.backtrack_lexer){if(!1!==(e=this.test_match(r,s[o])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,s[i]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{ranges:!0},performAction:function(e,t,r,i){switch(r){case 0:case 1:break;case 2:this.begin("comment");break;case 3:this.popState();break;case 4:case 5:break;case 6:return 27;case 7:return"CARACTER";case 8:return 26;case 9:return 25;case 10:return"masmas";case 11:return 23;case 12:return"menosmenos";case 13:return 17;case 14:return 18;case 15:return 16;case 16:return 15;case 17:return 13;case 18:return 14;case 19:return"pregunta";case 20:return"dospuntos";case 21:return"and";case 22:return"or";case 23:return"igual";case 24:return"not";case 25:return 21;case 26:return 20;case 27:return 25;case 28:return 22;case 29:return 24;case 30:return 9;case 31:return 11;case 32:return"llaveabre";case 33:return"llavecierra";case 34:return"corcheteabre";case 35:return"corchetecierra";case 36:return 12;case 37:return"coma";case 38:return 7;case 39:return"if";case 40:return"else";case 41:return 6;case 42:return 8;case 43:return"while";case 44:return"do";case 45:return"return";case 46:return"continue";case 47:return"break";case 48:return"default";case 49:return"case";case 50:return"switch";case 51:return 30;case 52:return 31;case 53:return"int";case 54:return"double";case 55:return"String";case 56:return"boolean";case 57:return"char";case 58:return"final";case 59:return"public";case 60:return"protected";case 61:return"private";case 62:return"void";case 63:return"override";case 64:return"class";case 65:return"THIS";case 66:return"static";case 67:return"for";case 68:return"new";case 69:return"length";case 70:return"null";case 71:return"tochararray";case 72:return"tolowercase";case 73:return"touppercase";case 74:return"import";case 75:return"extends";case 76:return"graph";case 77:return"try";case 78:return"catch";case 79:return"str";case 80:return"todouble";case 81:return"toint";case 82:return"tochar";case 83:return"instanceof";case 84:return t.yytext=t.yytext.substr(1,t.yyleng-2),29;case 85:return"IDENTIFICADOR";case 86:return 5;case 87:return"INVALID"}},rules:[/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:['][^\n]['])/,/^(?:(0|[0-9]+))/,/^(?:%)/,/^(?:\+\+)/,/^(?:\*\*)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\?)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:!)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:final\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:void\b)/,/^(?:@Override\b)/,/^(?:class\b)/,/^(?:this\b)/,/^(?:static\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:length\b)/,/^(?:null\b)/,/^(?:toCharArray\b)/,/^(?:toLowerCase\b)/,/^(?:toUpperCase\b)/,/^(?:import\b)/,/^(?:extends\b)/,/^(?:graph\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:str\b)/,/^(?:toDouble\b)/,/^(?:toInt\b)/,/^(?:toChar\b)/,/^(?:instanceof\b)/,/^(?:"((\\")|[^"])*")/,/^(?:(ñ|Ñ|_|[a-zA-Z])(ñ|Ñ|[a-zA-Z]|[0-9]|_)*)/,/^(?:$)/,/^(?:.)/],conditions:{comment:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],inclusive:!0},INITIAL:{rules:[0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],inclusive:!0}}};function E(){this.yy={}}return _.lexer=$,E.prototype=_,_.Parser=E,new E}();"undefined"!=typeof exports&&(exports.parser=a,exports.Parser=a.Parser,exports.parse=function(){return a.parse.apply(a,arguments)},exports.main=function(t){t[1]||(console.log("Usage: "+t[0]+" FILE"),e.exit(1))},r.c[r.s]===i&&exports.main(e.argv.slice(1)))}).call(this,r(68),r(69)(e))},70:function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var i=r(54),s=r(56);const o=class extends i.a{constructor(e,t,r,i){super(e,t,r,i)}ejecutar(){switch(this.token){case"MAS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar(),r=this.comprobarOperacion(e,t,"MAS");return r}case"MENOS":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MENOS")}case"POR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POR")}case"DIV":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"DIV")}case"POTENCIA":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"POTENCIA")}case"MODULO":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return this.comprobarOperacion(e,t,"MODULO")}case"NEGADO":{let e=this.hijos[0].ejecutar();return this.comprobarOperacion(e,e,"NEGADO")}case"NUMERICO":return Number(this.texto);case"STRING":return String(this.texto);case"BOOLEAN":return"true"==this.texto.toLowerCase();default:return 0}}comprobarOperacion(e,t,r){switch(r){case"MAS":if("number"==typeof e&&"number"==typeof t)return Number(e+t);if("number"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"number"==typeof t)return String(e+t);if("string"==typeof e&&"string"==typeof t)return String(e+t);if("string"==typeof e&&"boolean"==typeof t)return String(e+t);if("boolean"==typeof e&&"string"==typeof t)return String(e+t);break;case"MENOS":return"number"==typeof e&&"number"==typeof t?Number(e-t):null;case"POR":if("number"==typeof e&&"number"==typeof t)return Number(e*t);break;case"DIV":if("number"==typeof e&&"number"==typeof t)return Number(e+t);break;case"POTENCIA":if("number"==typeof e&&"number"==typeof t)return Number(e**t);break;case"MODULO":if("number"==typeof e&&"number"==typeof t)return Number(e%t);break;case"NEGADO":if("number"==typeof e&&"number"==typeof t)return-1*Number(e);break;default:return 0}return window.errores.push(new s.a("Semantico","No se pude operar ("+this.texto+") con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),0}}},71:function(e,t,r){"use strict";r.d(t,"a",(function(){return o}));var i=r(54),s=r(56);const o=class extends i.a{constructor(e,t,r,i){super(e,t,r,i)}ejecutar(){switch(this.token){case"MAYOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new s.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>t}case"MENOR":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new s.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<t}case"MAYOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new s.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e>=t}case"MENOROIGUAL":{let e=this.hijos[0].ejecutar(),t=this.hijos[1].ejecutar();return"number"!=typeof e||"number"!=typeof t?(window.errores.push(new s.a("Semantico","No se pude operar "+this.texto+" con tipo de dato: "+typeof e+" y "+typeof t+".",this.location.last_line,this.location.last_column)),!1):e<=t}case"IGUALIGUAL":return this.hijos[0].ejecutar()==this.hijos[1].ejecutar();case"DIFERENTE":return this.hijos[0].ejecutar()!=this.hijos[1].ejecutar();default:return!1}}}},72:function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));var i=r(54);const s=class extends i.a{constructor(e,t,r,i){super(e,t,r,i)}ejecutar(){let e=this.hijos[0].ejecutar(),t="";"number"==typeof e&&(t=String(e)),"string"==typeof e&&(t=e),"boolean"==typeof e&&(t=String(e)),window.textoConsola.push(t),window.dispatchEvent(new CustomEvent("console-changed",{detail:window.textoConsola}))}}},76:function(e,t,r){"use strict";r.r(t);var i=r(55),s=r(41),o=r(8);const n=o.b`
  a,button {
    font-size: inherit;
    vertical-align: middle;
    background: #fff;
    border: none;
    cursor: pointer;
    outline:none;
    box-shadow: var(--shadow-elevation-4dp_-_box-shadow);
    text-decoration: none;
  }

  button.rounded {
    border-radius:100%;
    width: 44px;
    height: 44px;
  }

  button:hover svg {
    fill: var(--accent-color);
  }

  .md{
    height: 50px;
    margin-top: 25px;
  }

  .primary {
    background-color:var(--dark-primary-color);
    color:white;    
    font-weight: 600;
  }

  .primary span svg{
    fill:white;
  }

  .text {
    border: 1px solid var(--dark-primary-color);
    color: var(--dark-primary-color);
  }

  .text span svg{
    fill: var(--dark-primary-color);
  }

  .centered {
    transform: translateX(-50%);
    margin-left: 50%;
    margin-top: 25px;
  }
  
  @media (max-width: 840px){
    form .centered{
      transform: none;
      margin: auto;
    }

    form .centered.md {
      margin-top: 12.5px;
    }

  }`,a=o.b`
    .styled-button {
        display: inline-block;
    }
    
    .styled-button {
        display: inline-block;
        box-sizing: border-box;
        border: 2px solid var(--dark-primary-color);
        background-color: #FFF;
        font-size: 14px;
        font-weight: 500;
        color: var(--dark-primary-color);
        margin: 0;
        text-align: center;
        text-decoration: none;
        text-transform: uppercase;
        border-radius: 0;
        outline: none;
        -webkit-appearance: none;
        cursor: pointer;
        padding: 0;
    }
    
    .styled-button > * {
        width:100%;
        display:inline-block;
        cursor:pointer;
        font-weight:bolder;
    }
    
    .styled-button:focus, .styled-button > *:focus {
        background-color: #c5cad3;
    }
    
    .styled-button:hover, .styled-button:active, .styled-button  > *:active {
        background-color: var(--dark-primary-color);
        color: #FFF;
    }
    
    @media (max-width: 767px) {
        .styled-button [responsive] {
        position: var(--layout-fixed-bottom_-_position); 
        right: var(--layout-fixed-bottom_-_right); 
        bottom: var(--layout-fixed-bottom_-_bottom); 
        left: var(--layout-fixed-bottom_-_left);
        height: 64px;
        z-index: 1;
    }
    
    .styled-button [responsive] > * {
        background-color: var(--dark-primary-color);
        border: none;
        color: white;
        padding: 20px;
        width: 100%;
        height: 100%;
        font-size: 15px;
    }
    
    .styled-button [responsive] > *:focus {
        background-color: var(--dark-primary-color);
    }
}`;r(62),r(73),r(59),r(56);class l extends o.a{static get properties(){return{optimization:{type:Boolean},erores:{type:Array}}}static get styles(){return[s.f,o.b`
        :host {
          --paper-tabs-selection-bar-color: var(--default-primary-color);
          height: 90%;
          background: white;
          display: block;
          padding: 5px 0 0 0;
          height: 100%;
        }

        .header {
          background: var(--accent-color);
          color: white;
          border-radius: 5px 5px 0 0;
          font-size: 1.5em;
          padding: 8px;
        }

        div.row {
          width: 100%;
        }

        div.row:nth-child(n) {
          background: #f6faee;
        }
        div.row:nth-child(2n) {
          background: #a9c4d4;
          color: white;
        }

        div.header > div {
          width: 25%;
          font-size: 14px;
          display: inline-block;
          font-weight: bolder;
          text-align: center;
          background: var(--accent-color);
        }

        div.row > div {
          width: 24%;
          font-size: 14px;
          font-weight: 500;
          display: inline-block;
          text-align: justify;
        }

        main {
          overflow: auto;
          height: 100%;
        }
      `]}constructor(){super(),this.errores=[],window.addEventListener("graficar-errores",e=>{this.errores=e.detail,this.requestUpdate()})}render(){return o.c`
      <main id="main-content">
        <div class="header">
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Tipo
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Descripcion
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Linea
          </div>
          <div style="text-align: center; font-weight: bolder; width: 23%;">
            Columna
          </div>
        </div>
        ${this.errores.map(e=>o.c`<div class="row">
            <div style="text-align: center;">${e.getTipo()}</div>
            <div>${e.getDescripcion()}</div>
            <div style="text-align: center;">${e.getLinea()}</div>
            <div style="text-align: center;">${e.getColumna()}</div>
          </div>`)}
      </main>
    `}}window.customElements.define("error-component",l);class c extends o.a{static get properties(){return{information:Object,keys:Array}}static get styles(){return[s.d,o.b`
        * {
          box-sizing: border-box;
        }
        :host {
          display: block;
          height: 100%;
        }

        .row,
        .header {
          display: grid;
          grid-template-columns: repeat(9, 1fr);
          text-align: center;
        }

        .header {
          background: var(--accent-color);
          color: white;
          border-radius: 5px 5px 0 0;
          font-size: 1.5em;
          padding: 8px;
        }

        .title {
          background: var(--default-primary-color);
          font-size: 1.5em;
        }

        .row label,
        .header label {
          display: inline-block;
          width: auto;
        }

        .row:last-child {
          border-radius: 0 0 5px 5px;
        }

        .body {
          overflow: auto;
          height: 87.5%;
          display: block;
        }

        .container {
          height: 100%;
        }
      `]}constructor(){super(),this.keys=["identifier","position","type","aux-type","rol","constant","scope","dimensions","parameters"],this.information={}}render(){return o.c` <div class="container">
      <div class="header">
        ${this.keys.map(e=>o.c`<label>${e}</label>`)}
      </div>
      <div class="body" id="main-content">
        <div class="title">Hola</div>
        <div class="row">paku</div>
      </div>
    </div>`}}customElements.define("symbol-table",c);var h=r(63);class d extends o.a{static get properties(){return{src:{type:String,reflect:!0},svg:{type:String}}}static get styles(){return[s.f,s.d,o.b`
        main {
          overflow: auto;
          background: black;
          width: 100%;
          height: 100%;
        }
      `]}constructor(){super(),this.src="",window.addEventListener("graficar-tree",e=>{this.src=e.detail,this.requestUpdate()})}render(){return o.c`
      <main id="main-content">
        ${""!==this.svg?Object(h.a)(this.svg):""}
      </main>
    `}attributeChangedCallback(e,t,r){"src"===e&&""!==r&&(this.svg=Viz(r,{format:"svg"}))}}window.customElements.define("graph-tree",d);class p extends o.a{static get properties(){return{selected:{type:Number},console:{type:Array},errors:{type:Array},information:{type:Object},graph:{type:String},blockgraph:{type:String}}}constructor(){super(),window.addEventListener("console-changed",e=>{this.console=e.detail,this.requestUpdate()}),window.addEventListener("graphblock-generated",e=>{this.blockgraph=e.detail,this.requestUpdate()}),window.addEventListener("error-catched",e=>{this.errors=[...e.detail],this.requestUpdate()}),this.console=[],this.queries=[],this.errors=[],this.information={}}static get styles(){return[s.d,s.f,n,s.e,s.c,o.b`
        :host {
          --paper-tabs-selection-bar-color: var(--default-primary-color);
          margin: 10px 3% 25px;
          width: 94%;
          background: white;
          box-shadow: var(--shadow-box-2dp-custom);
          display: block;
          padding: 5px 0 0 0;
          height: 75vh;
        }

        paper-tab.iron-selected,
        paper-tab:hover {
          background: var(--accent-color);
          color: var(--light-primary-color);
          border-radius: 5px 5px 0 0;
        }

        #textarea {
          background: #021b2b;
          color: cyan;
          display: block;
          width: 100%;
          height: 100%;
          resize: none;
          border-radius: 0 0 5px 5px;
          overflow: auto;
        }

        #textarea span {
          display: block;
          width: 100%;
          height: 14px !important;
          white-space: pre-wrap;
        }

        div {
          height: 100%;
          width: 100%;
        }

        iron-pages {
          display: block;
          height: 90%;
        }

        graph-tree {
          height: 100%;
          border-radius: 0 0 10px 10px;
        }

        paper-tab {
          background: var(--light-primary-color);
          border-radius: 5px 5px 0 0;
          color: var(--accent-color);
        }
      `]}render(){return o.c`<paper-tabs .selected="${this.selected}" scrollable>
        <paper-tab
          @click="${()=>{this.selected=0}}"
          >Consola</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=1}}"
          >Errores</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=2}}"
          >Simbolos</paper-tab
        >
        <paper-tab
          @click="${()=>{this.selected=3}}"
          >Grafo</paper-tab
        >
      </paper-tabs>
      <iron-pages .selected="${this.selected}" id="main-content">
        <div>
          <div id="textarea" readonly class="overflowable">
            ${this.console.map(e=>o.c`<span>${e}</span>`)}
          </div>
        </div>
        <div>
          <error-component
            .errors=${this.errors}
            ?optimization=${!1}
          ></error-component>
        </div>

        <div>
          <symbol-table .information="${this.information}"></symbol-table>
        </div>
        <div>
          <graph-tree .src="${this.graph}"></graph-tree>
        </div>
      </iron-pages>`}}window.customElements.define("console-element",p);const u=o.b`
    .CodeMirror {
    /* Set height, width, borders, and global font properties here */
    font-family: monospace;
    height: 300px;
    color: black;
    direction: ltr;
    }

    /* PADDING */

    .CodeMirror-lines {
    padding: 4px 0; /* Vertical padding around content */
    }
    .CodeMirror pre {
    padding: 0 4px; /* Horizontal padding of content */
    }

    .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    background-color: white; /* The little square between H and V scrollbars */
    }

    /* GUTTER */

    .CodeMirror-gutters {
    border-right: 1px solid #ddd;
    background-color: #f7f7f7;
    white-space: nowrap;
    }
    .CodeMirror-linenumbers {}
    .CodeMirror-linenumber {
    padding: 0 3px 0 5px;
    min-width: 20px;
    text-align: right;
    color: #999;
    white-space: nowrap;
    }

    .CodeMirror-guttermarker { color: black; }
    .CodeMirror-guttermarker-subtle { color: #999; }

    /* CURSOR */

    .CodeMirror-cursor {
    border-left: 1px solid black;
    border-right: none;
    width: 0;
    }
    /* Shown when moving in bi-directional text */
    .CodeMirror div.CodeMirror-secondarycursor {
    border-left: 1px solid silver;
    }
    .cm-fat-cursor .CodeMirror-cursor {
    width: auto;
    border: 0 !important;
    background: #7e7;
    }
    .cm-fat-cursor div.CodeMirror-cursors {
    z-index: 1;
    }
    .cm-fat-cursor-mark {
    background-color: rgba(20, 255, 20, 0.5);
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    }
    .cm-animate-fat-cursor {
    width: auto;
    border: 0;
    -webkit-animation: blink 1.06s steps(1) infinite;
    -moz-animation: blink 1.06s steps(1) infinite;
    animation: blink 1.06s steps(1) infinite;
    background-color: #7e7;
    }
    @-moz-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @-webkit-keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }
    @keyframes blink {
    0% {}
    50% { background-color: transparent; }
    100% {}
    }

    /* Can style cursor different in overwrite (non-insert) mode */
    .CodeMirror-overwrite .CodeMirror-cursor {}

    .cm-tab { display: inline-block; text-decoration: inherit; }

    .CodeMirror-rulers {
    position: absolute;
    left: 0; right: 0; top: -50px; bottom: -20px;
    overflow: hidden;
    }
    .CodeMirror-ruler {
    border-left: 1px solid #ccc;
    top: 0; bottom: 0;
    position: absolute;
    }

    /* DEFAULT THEME */

    .cm-s-default .cm-header {color: blue;}
    .cm-s-default .cm-quote {color: #090;}
    .cm-negative {color: #d44;}
    .cm-positive {color: #292;}
    .cm-header, .cm-strong {font-weight: bold;}
    .cm-em {font-style: italic;}
    .cm-link {text-decoration: underline;}
    .cm-strikethrough {text-decoration: line-through;}

    .cm-s-default .cm-keyword {color: #708;}
    .cm-s-default .cm-atom {color: #219;}
    .cm-s-default .cm-number {color: #164;}
    .cm-s-default .cm-def {color: #00f;}
    .cm-s-default .cm-variable,
    .cm-s-default .cm-punctuation,
    .cm-s-default .cm-property,
    .cm-s-default .cm-operator {}
    .cm-s-default .cm-variable-2 {color: #05a;}
    .cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}
    .cm-s-default .cm-comment {color: #a50;}
    .cm-s-default .cm-string {color: #a11;}
    .cm-s-default .cm-string-2 {color: #f50;}
    .cm-s-default .cm-meta {color: #555;}
    .cm-s-default .cm-qualifier {color: #555;}
    .cm-s-default .cm-builtin {color: #30a;}
    .cm-s-default .cm-bracket {color: #997;}
    .cm-s-default .cm-tag {color: #170;}
    .cm-s-default .cm-attribute {color: #00c;}
    .cm-s-default .cm-hr {color: #999;}
    .cm-s-default .cm-link {color: #00c;}

    .cm-s-default .cm-error {color: #f00;}
    .cm-invalidchar {color: #f00;}

    .CodeMirror-composing { border-bottom: 2px solid; }

    /* Default styles for common addons */

    div.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}
    div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}
    .CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }
    .CodeMirror-activeline-background {background: #e8f2ff;}

    /* STOP */

    /* The rest of this file contains styles related to the mechanics of
    the editor. You probably shouldn't touch them. */

    .CodeMirror {
    position: relative;
    overflow: hidden;
    background: white;
    }

    .CodeMirror-scroll {
    overflow: scroll !important; /* Things will break if this is overridden */
    /* 30px is the magic margin used to hide the element's real scrollbars */
    /* See overflow: hidden in .CodeMirror */
    margin-bottom: -30px; margin-right: -30px;
    padding-bottom: 30px;
    height: 100%;
    outline: none; /* Prevent dragging from highlighting the element */
    position: relative;
    }
    .CodeMirror-sizer {
    position: relative;
    border-right: 30px solid transparent;
    }

    /* The fake, visible scrollbars. Used to force redraw during scrolling
    before actual scrolling happens, thus preventing shaking and
    flickering artifacts. */
    .CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
    position: absolute;
    z-index: 6;
    display: none;
    }
    .CodeMirror-vscrollbar {
    right: 0; top: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    }
    .CodeMirror-hscrollbar {
    bottom: 0; left: 0;
    overflow-y: hidden;
    overflow-x: scroll;
    }
    .CodeMirror-scrollbar-filler {
    right: 0; bottom: 0;
    }
    .CodeMirror-gutter-filler {
    left: 0; bottom: 0;
    }

    .CodeMirror-gutters {
    position: absolute; left: 0; top: 0;
    min-height: 100%;
    z-index: 3;
    }
    .CodeMirror-gutter {
    white-space: normal;
    height: 100%;
    display: inline-block;
    vertical-align: top;
    margin-bottom: -30px;
    }
    .CodeMirror-gutter-wrapper {
    position: absolute;
    z-index: 4;
    background: none !important;
    border: none !important;
    }
    .CodeMirror-gutter-background {
    position: absolute;
    top: 0; bottom: 0;
    z-index: 4;
    }
    .CodeMirror-gutter-elt {
    position: absolute;
    cursor: default;
    z-index: 4;
    }
    .CodeMirror-gutter-wrapper ::selection { background-color: transparent }
    .CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }

    .CodeMirror-lines {
    cursor: text;
    min-height: 1px; /* prevents collapsing before first draw */
    }
    .CodeMirror pre {
    /* Reset some styles that the rest of the page might have set */
    -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;
    border-width: 0;
    background: transparent;
    font-family: inherit;
    font-size: inherit;
    margin: 0;
    white-space: pre;
    word-wrap: normal;
    line-height: inherit;
    color: inherit;
    z-index: 2;
    position: relative;
    overflow: visible;
    -webkit-tap-highlight-color: transparent;
    -webkit-font-variant-ligatures: contextual;
    font-variant-ligatures: contextual;
    }
    .CodeMirror-wrap pre {
    word-wrap: break-word;
    white-space: pre-wrap;
    word-break: normal;
    }

    .CodeMirror-linebackground {
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    z-index: 0;
    }

    .CodeMirror-linewidget {
    position: relative;
    z-index: 2;
    padding: 0.1px; /* Force widget margins to stay inside of the container */
    }

    .CodeMirror-widget {}

    .CodeMirror-rtl pre { direction: rtl; }

    .CodeMirror-code {
    outline: none;
    }

    /* Force content-box sizing for the elements where we expect it */
    .CodeMirror-scroll,
    .CodeMirror-sizer,
    .CodeMirror-gutter,
    .CodeMirror-gutters,
    .CodeMirror-linenumber {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    }

    .CodeMirror-measure {
    position: absolute;
    width: 100%;
    height: 0;
    overflow: hidden;
    visibility: hidden;
    }

    .CodeMirror-cursor {
    position: absolute;
    pointer-events: none;
    }
    .CodeMirror-measure pre { position: static; }

    div.CodeMirror-cursors {
    visibility: hidden;
    position: relative;
    z-index: 3;
    }
    div.CodeMirror-dragcursors {
    visibility: visible;
    }

    .CodeMirror-focused div.CodeMirror-cursors {
    visibility: visible;
    }

    .CodeMirror-selected { background: #d9d9d9; }
    .CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }
    .CodeMirror-crosshair { cursor: crosshair; }
    .CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }
    .CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }

    .cm-searching {
    background-color: #ffa;
    background-color: rgba(255, 255, 0, .4);
    }

    /* Used to force a border model for a node */
    .cm-force-border { padding-right: .1px; }

    @media print {
    /* Hide the cursor when printing */
    .CodeMirror div.CodeMirror-cursors {
    visibility: hidden;
    }
    }

    /* See issue #2901 */
    .cm-tab-wrap-hack:after { content: ''; }

    /* Help users use markselection to safely style text background */
    span.CodeMirror-selectedtext { background: none; }

    .CodeMirror::-webkit-scrollbar {
                    height:4px;
                    width: 4px;
                    background-color: #F5F5F5;
                }

                .CodeMirror::-webkit-scrollbar-thumb {
                    background-color: rgba(10, 10, 10, 0.69);
                }

                .CodeMirror::-webkit-scrollbar-track {
                    -webkit-box-shadow: inset 0 0 4px rgba(0,0,0,0.3);
                    background-color: #F5F5F5;
                }
    `;var g=r(61);window.CodeMirror=g.a;r(64),r(65),r(74);class b extends o.a{constructor(){super(),this.on="true",this.off="false",this.checked=!1}static get styles(){return[o.b`
                :host{
                    display: inline-block;
                    width: 15%;
                    margin: 0 auto 0;
                }

                :host([checked]) .sl{
                    color: var(--default-primary-color);
                }

                .si {
                    display: none;
                }
                .sl {
                    position: relative;
                    display: block;
                    min-width: 112px;
                    cursor: pointer;
                    text-align: left;
                    margin: 0 16px;
                    padding: 8px 0 8px 0px;
                    font-size: 1.125em;
                    font-family: 'Josefin Sans', sans-serif;
                    color: var(--primary-text-color);
                }
                .sl:before, .sl:after {
                    content: "";
                    position: absolute;
                    margin: 0;
                    outline: 0;
                    top: 50%;
                    -ms-transform: translate(0, -50%);
                    -webkit-transform: translate(0, -50%);
                    transform: translate(0, -50%);
                    -webkit-transition: all 0.3s ease;
                    transition: all 0.3s ease;
                }
                .sl:before {
                    right: 8px;
                    width: 34px;
                    height: 14px;
                    background-color: #9E9E9E;
                    border-radius: 8px;
                }
                .sl:after {
                    right: 23px;
                    width: 20px;
                    height: 20px;
                    background-color: #FAFAFA;
                    border-radius: 50%;
                    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
                }
                .sl .ton {
                    display: none;
                }
                
                .sl .toff {
                    display: inline-block;
                }
                .si:checked + .sl:before {
                    background-color: var(--default-primary-color);
                }
                .si:checked + .sl:after {
                    background-color: var(--dark-primary-color);
                    -ms-transform: translate(80%, -50%);
                    -webkit-transform: translate(80%, -50%);
                    transform: translate(80%, -50%);
                }
                .si:checked + .sl .ton {
                    display: inline-block;
                }
                .si:checked + .sl .toff {
                    display: none;
                }
                
                @media (max-width:440px){
                    :host{
                        padding-left:0;
                    }
                }`]}render(){return o.c`
            ${this.message}
            <div>
                <input type="checkbox" id="cb" name="cb" class="si" ?checked=${this.checked}>
                <label for="cb" class="sl" @click="${e=>{e.preventDefault(),this.checked=!this.checked,this.fire("value-changed",this.value)}}">
                    <span class="ton">${this.on}</span>
                    <span class="toff">${this.off}</span>
                </label>
            </div>`}static get properties(){return{on:{type:String},off:{type:String},error:{type:String},checked:{type:Boolean,reflect:!0},message:{type:String}}}value(){return this.checked}}customElements.define("custom-switch",b);o.b`
  .spin {
    -webkit-animation-name: spinner;
    -webkit-animation-timing-function: linear;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-duration: 6s;

    animation-name: spinner;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-duration: 6s;

    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    -ms-transform-style: preserve-3d;
    transform-style: preserve-3d;
  }

  .spin:hover {
    -webkit-animation-play-state: paused;
    animation-play-state: paused;
  }`;const m=o.b`
  @keyframes ripple {
    0% {
        box-shadow: 0px 0px 0px 1px rgba(1, 136, 209, 0);
    }
    50% {
        box-shadow: 0px 0px 2.5px 25px rgba(1, 136, 209, 0.20);
    }
    100% {
        box-shadow: 0px 0px 2.5px 50px rgba(1, 136, 209, 0.10);;
    }
  }`;o.b`

  @keyframes fade-in-opacity-transition {
    from { visibility: hidden; opacity: 0; }
    to { opacity: 1; visibility: visible; }
  }

  @keyframes fade-out-opacity-transition {
    from { opacity: 1; visibility: visible; }
    to { visibility: hidden; opacity: 0; }
  }

  :host(.fadein) {
    animation: fade-in-opacity-transition .5s 1 normal linear;
  }

  :host(.fadeout) {
    animation: fade-out-opacity-transition .5s 1 normal linear forwards;
  }

  :host(.hide){
    display: none;
  }
`,o.b`

    @keyframes fade-opacity-forwards{
        from { opacity: 0; visibility: hidden; }
        to { opacity: 1; visibility: visible; }
    }
    
    @keyframes fade-opacity-reverse{
        from { opacity: 1; visibility: visible; }
        to { opacity: 0; visibility: hidden; }
    }

    .fadein {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
    }

    .fadeout {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
    }

    .fadeout-delay {
        animation: fade-opacity-reverse ease-in-out 250ms forwards normal;
        visibility: visible;
        opacity: 1;
        animation-delay: 250ms;
    }

    .fadein-delay {
        animation: fade-opacity-forwards ease-in-out 250ms forwards normal;
        visibility: hidden;
        opacity: 0;
        animation-delay: 250ms;
    }

    .iron-selected label.index::after{
        content: none;
    }
`;class y extends o.a{constructor(){super(),this.opened=!1,this.optics=[],this.setInitialValues()}setInitialValues(){this._optic="",this.message=""}static get styles(){return[a,m,o.b`
            paper-dropdown-menu{
                margin-left: 50%;
                transform: translateX(-50%);
            }

            :host {
                display: block;
                position: fixed;
                background-color: var(--default-primary-color);
                color: white;
                box-shadow: var(--shadow-box-4dp-custom);
                width: 320px;
                padding: 12px;
                visibility: hidden;
                will-change: transform;
                top: 225px;
                right: 16px;
                -webkit-transform: translate3d(calc(100% + 16px), 0, 0);
                transform: translate3d(calc(100% + 16px), 0, 0);
                transition-property: visibility, -webkit-transform, background-color;
                transition-property: visibility, transform, background-color;
                transition-duration: 0.25s;
                transition-delay: 0.1s;
                z-index : 300;
            }

            :host(.error){
                color: #fff;
                background-color: var(--error-color);
                box-shadow: var(--shadow-box-4dp-custom-error);
            }

            :host([opened]) {
                visibility: visible;
                -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0);
            }

            @media (min-width:840px){

                :host(.alert[opened]){
                    animation: ripple 5 .5s forwards linear;
                }
            }

            .layout-horizontal {
                display: var(--layout-horizontal_-_display); -ms-flex-direction: var(--layout-horizontal_-_-ms-flex-direction); -webkit-flex-direction: var(--layout-horizontal_-_-webkit-flex-direction); flex-direction: var(--layout-horizontal_-_flex-direction);
            }

            .label {
                -ms-flex: var(--layout-flex_-_-ms-flex); -webkit-flex: var(--layout-flex_-_-webkit-flex); flex: var(--layout-flex_-_flex); -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis); flex-basis: var(--layout-flex_-_flex-basis);
                line-height: 24px;
                margin: 8px;
                font-size: 1.25em;
            }

            .modal-button {
                -ms-flex: var(--layout-flex_-_-ms-flex);
                -webkit-flex: var(--layout-flex_-_-webkit-flex);
                flex: var(--layout-flex_-_flex);
                -webkit-flex-basis: var(--layout-flex_-_-webkit-flex-basis);
                flex-basis: var(--layout-flex_-_flex-basis);
            }

            .modal-button > label {
                box-sizing: border-box;
                width: 100%;
                padding: 8px 24px;
            }

            #closeBtn {
                position: absolute;
                right: 5px;
                top: 5px;
            }

            @media (max-width: 770px) {
                :host {
                    top: auto;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    width: auto;
                    -webkit-transform: translate3d(0, 100%, 0);
                    transform: translate3d(0, 100%, 0);
                }
            }`]}render(){return o.c`
            <div class="layout-horizontal">
                <div class="label">${this.message}</div>
            </div>
            <paper-input label="Valor a ingresar" always-float-label id="sysin"></paper-input>
            <div class="layout-horizontal">
                <button class="styled-button modal-button" @click="${this.resolveVal}">
                    <label>Aceptar</label>
                </button>
            </div>`}static get properties(){return{message:{type:String},position:{type:String},opened:{type:Boolean,reflect:!0}}}resolveVal(){this.onResolve(this._("sysin").value),this.closeModal()}closeModal(){this.opened=!1}openModal(e){return this.opened=!0,this.message=e,new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}reset(){this.setInitialValues(),this.classList.remove("error")}animate(){this.classList.toggle("alert"),setTimeout(()=>this.classList.toggle("alert"),2500)}}customElements.define("custom-simple-modal",y);r(66);var f=r(47);const w=new class{constructor(){this.reset()}changeHeapPointer(e){this.heap_pointer=e}changeStackPointer(e){this.stack_pointer=e}insertTemporary(e,t){if(!this.tKeys.includes(e))throw Error(e+" is not defined");this.data[e]=t}setError(e){this.error=e}getError(e){return this.error}getTemporary(e){return this.data[e]}getStackPointer(){return this.stack_pointer}addToStackPointer(e){this.stack_pointer+=e}substractToStackPointer(e){this.stack_pointer-=e}getHeapPointer(){return this.heap_pointer}getFromStack(e){return this.stack[e]}getFromHeap(e){return this.heap[e]}insertInHeap(e,t){this.heap[e]=t,window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap}))}insertInStack(e,t){this.stack[e]=t,window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack}))}createTemporary(e){this.data[e.toLowerCase()]=0,this.tKeys.push(e.toLowerCase())}reset(){this.consola=[""],this.data={},this.tKeys=[],this.labels=new Map,this.methods=new Map,this.stack_pointer=0,this.heap_pointer=0,this.error=0,this.stack=new Array(5e3).fill(-1),this.heap=new Array(5e3).fill(-1),this.callStack=[],window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola})),window.dispatchEvent(new CustomEvent("stack-changed",{detail:this.stack})),window.dispatchEvent(new CustomEvent("heap-changed",{detail:this.heap})),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:this.heap_pointer})),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:this.stack_pointer}))}insertInCallStack(e){this.callStack.push(e)}lastNode(){return this.callStack.pop()}mapLabels(e){let t=e;for(;null!=t;)10===t.type?this.labels.set(t.value,t):7==t.type&&this.mapLabels(t.getChild(0)),t=t.next}mapMethods(e){this.methods.clear();let t=e;for(;null!=t;)7==t.type&&this.methods.set(t.value,t),t=t.next}getNode(e){return this.labels.get(e)}insertInConsole(e,t=!1){t?this.consola.push(e):this.consola[this.consola.length-1]=this.consola[this.consola.length-1]+e,window.dispatchEvent(new CustomEvent("console-changed",{detail:this.consola}))}};window.Structures=w;const v={names:["+","-","*","%","/","number","identifier","method","begin","end","label","tmp","stack","heap","goto","==","<>",">","<",">=","<=","print","=","sp","hp","call","var","E"],types:{"+":0,"-":1,"*":2,"%":3,"/":4,number:5,identifier:6,method:7,begin:8,end:9,label:10,tmp:11,stack:12,heap:13,goto:14,"==":15,"<>":16,">":17,"<":18,">=":19,"<=":20,sysin:21,print:22,"=":23,sp:24,hp:25,exit:26,call:27,var:28,e:29}},x=class{constructor(e,t,r,i){this.type=v.types[e.toString().toLowerCase()],this.name=e.toString().toLowerCase(),void 0===this.type&&console.log(e),this.value=t,this.line=r,this.column=i,this.children=[],this.next=null,this.last=null,this.parent=null,this.isFalse=!1,this.isLeader=!1;for(let e=4;e<arguments.length;e++)this.children.push(arguments[e]),arguments[e].parent=this}markLeader(){this.isLeader=!0}getValue(){return this.value}addChild(...e){e.forEach(e=>{this.children.push(e),e.parent=this})}getChild(e){return e>this.children.length?null:this.children[e]}getLine(){return this.line}setValue(e){this.value=e}setNext(e){let t=this;for(;null!=t.next;)t=t.next;t.next=e,null!==e&&(e.last=t)}changeType(e){this.type=v.types[e],this.name=e}printTree(e=""){console.log(`${e}#${v.names[this.type]} (${this.type})`),this.children.forEach(t=>{t.printTree(e+"\t")}),this.next&&this.next.printTree(e)}toString(){switch(this.type){case v.types.stack:return`Stack[${this.getChild(0).toString()}]`;case v.types.heap:return`Heap[${this.getChild(0).toString()}]`;case v.types["-"]:case v.types["*"]:case v.types["/"]:case v.types["+"]:case v.types["%"]:return`${this.getChild(0).toString()} ${v.names[this.type]} ${this.getChild(1).toString()}`;case v.types.tmp:case v.types.number:return this.value;case v.types.sp:return"P";case v.types.hp:return"H";case v.types.var:return this.getChild(0).type===v.types.heap?"var Heap[];\n":this.getChild(0).type===v.types.stack?"var Stack[];\n":this.children.length>1?`var ${this.children.map(e=>e.toString()).join(",")};\n`:`var ${this.getChild(0).toString()};\n`;case v.types.print:return`print (${this.value}, ${this.getChild(0).toString()});\n`;case v.types.label:return this.value+":\n";case v.types.goto:return`goto ${this.value};\n`;case v.types["<"]:case v.types[">"]:case v.types[">="]:case v.types["<="]:case v.types["<>"]:case v.types["=="]:return`if (${this.getChild(0).toString()}${this.isFalse?this.negate():v.names[this.type]}${this.getChild(1).toString()}) goto ${this.value};\n`;case v.types["="]:return`${this.getChild(0).toString()} = ${this.getChild(1).toString()};\n`;case v.types.call:return`call ${this.value};\n`;case v.types.method:{let e="",t=this.getChild(0);for(;null!==t;)e+=t.toString(),t=t.next;return`proc ${this.value} begin\n${e}end\n`}case v.types.e:return"E";default:return""}}copy(){const e=new x(this.name,this.value,this.line,this.column);e.name=this.name,e.type=this.type,e.isFalse=this.isFalse,e.isLeader=this.isLeader;for(const t of this.children)e.addChild(t.copy());return e}childrenSize(){return this.children.length}equals(e){return e.name===this.name&&e.type===this.type&&this.value===e.value&&e.column===this.column&&e.line===this.line}getNonNumericTypes(){switch(this.type){case v.types.hp:return["H"];case v.types.sp:return["P"];case v.types.tmp:return[this.getValue()];case v.types["-"]:case v.types["*"]:case v.types["/"]:case v.types["+"]:case v.types["%"]:{const e=[];return this.getChild(0).getType()!==v.types.number&&e.push(this.getChild(0).getValue()),this.getChild(1).getType()!==v.types.number&&e.push(this.getChild(1).getValue()),e}default:return[]}}typeEquality(e){if(e.childrenSize()!==this.childrenSize)return!1;if(this.getType()===e.getType()&&this.getValue()===e.getValue()){for(let t=0;t<e.childrenSize();t++)if(!this.getChild(t).typeEquality(e))return!1;return!0}return!1}getType(){return this.type}toStringSpecial(){switch(this.type){case v.types.var:return"var lista temporales;";case v.types[">"]:return`if (${this.getChild(0).toString()} GT ${this.getChild(1).toString()}) goto ${this.value}`;case v.types[">="]:return`if (${this.getChild(0).toString()} GTE ${this.getChild(1).toString()}) goto ${this.value}`;case v.types["<"]:return`if (${this.getChild(0).toString()} LT ${this.getChild(1).toString()}) goto ${this.value}`;case v.types["<="]:return`if (${this.getChild(0).toString()} LTE ${this.getChild(1).toString()}) goto ${this.value}`;case v.types["=="]:return`if (${this.getChild(0).toString()} EQEQ ${this.getChild(1).toString()}) goto ${this.value}`;case v.types["<>"]:return`if (${this.getChild(0).toString()} NOTEQ ${this.getChild(1).toString()}) goto ${this.value}`;default:return this.toString()}}negate(){switch(this.type){case v.types[">"]:return"<=";case v.types[">="]:return"<";case v.types["<="]:return">";case v.types["<"]:return">=";case v.types["<>"]:return"==";default:return"<>"}}hasZero(){return this.getChild(0).getType()===v.types.number&&0===this.getChild(0).value?0:this.getChild(1).getType()===v.types.number&&0===this.getChild(1).value?1:-1}hasTwo(){return this.getChild(0).getType()===v.types.number&&2===this.getChild(0).value?0:this.getChild(1).getType()===v.types.number&&2===this.getChild(1).value?1:-1}hasOne(){return this.getChild(0).getType()===v.types.number&&1===this.getChild(0).value?0:this.getChild(1).getType()===v.types.number&&1===this.getChild(1).value?1:-1}deleteAt(e){return this.children.splice(e,1)}converToFalse(){this.isFalse=!0}isConstantOperation(){return this.getChild(0).getType()===v.types.number&&this.getChild(1).getType()===v.types.number}trimMethodList(){null!=this.getChild(0).next&&(this.getChild(0).next.last=null,this.children[0]=this.getChild(0).next);let e=this.getChild(0);for(;null!=e.next;)e=e.next;e.last.next=e.next}usesTmp(e){switch(this.getChild(0)){case v.types.heap:case v.types.stack:if(this.getChild(0).getChild(0).getType()===v.types.tmp&&this.getChild(0).getChild(0).getValue()===e)return!0;break;case v.types.tmp:case v.types.sp:case v.types.hp:switch(this.getChild(1)){case v.types["-"]:case v.types["*"]:case v.types["/"]:case v.types["+"]:case v.types["%"]:if(this.getChild(1).getChild(0).getType()===v.types.tmp&&this.getChild(1).getChild(0).getValue()===e)return!0;if(this.getChild(1).getChild(1).getType()===v.types.tmp&&this.getChild(1).getChild(1).getValue()===e)return!0;break;case v.types.tmp:if(this.getChild(1).getValue()===e)return!0}}return!1}};const k=new class{constructor(){this.breakpoints=[],this.onReject=null,this.onResolve=null,this.stop=!0,this.lineByLine=!1,window.addEventListener("debugger-mode",e=>{e.detail?this.lineByLine=!0:(this.lineByLine=!1,this.stop=!0)})}heapAccess(e){const t=this.leftHandAccess(e.getChild(0));return-1!==t&&0!==t||(w.insertInConsole("null pointer exception...",!0),console.log(e.line,e.column),executeLine.next(new x("exit",null,-1,-1))),w.heap[t]}stackAccess(e){const t=this.leftHandAccess(e.getChild(0));return w.stack[t]}assignment(e){const t=this.leftHandAccess(e.getChild(1));switch(e.getChild(0).type){case v.types.tmp:w.data[e.getChild(0).value]=t,window.dispatchEvent(new CustomEvent("temporaries-changed",{detail:{temporaries:w.data,tmp:e.getChild(0).value}}));break;case v.types.sp:w.stack_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("stack-pointer-changed",{detail:w.stack_pointer}));break;case v.types.hp:w.heap_pointer=parseInt(t),window.dispatchEvent(new CustomEvent("heap-pointer-changed",{detail:w.heap_pointer}));break;case v.types.stack:const r=this.leftHandAccess(e.getChild(0).getChild(0));w.insertInStack(r,t);break;case v.types.heap:const i=this.leftHandAccess(e.getChild(0).getChild(0));-1!=i&&0!=i||(w.insertInConsole("null pointer exception...",!0),executeLine.next(new x("exit",null,-1,-1))),w.insertInHeap(i,t)}}leftHandAccess(e){switch(e.type){case v.types["+"]:case v.types["-"]:case v.types["*"]:case v.types["%"]:case v.types["/"]:return this.aritmethicStmt(e);case v.types.number:return e.value;case v.types.tmp:return w.getTemporary(e.value.toString().toLowerCase());case v.types.heap:return this.heapAccess(e);case v.types.stack:return this.stackAccess(e);case v.types.hp:return w.heap_pointer;case v.types.sp:return w.stack_pointer}}aritmethicStmt(e){const t=this.leftHandAccess(e.getChild(0)),r=this.leftHandAccess(e.getChild(1));switch(e.type){case v.types["+"]:return t+r;case v.types["-"]:return t-r;case v.types["*"]:return t*r;case v.types["%"]:return Math.fmod(t,r);case v.types["/"]:return parseFloat(t/r).toPrecision(2)}return-1}printStmt(e){const t=e.value,r=this.leftHandAccess(e.getChild(0));switch(t){case'"%c"':10===r?w.insertInConsole("",!0):13!=r&&w.insertInConsole(String.fromCharCode(r));break;case'"%i"':w.insertInConsole(r);break;case'"%d"':w.insertInConsole(Number(r).toFixed(2))}}jmpInconditionalStmt(e){const t=e.value.toString(),r=w.getNode(t);executeLine.next(r.last).value}jmpConditionalStmt(e){const t=this.leftHandAccess(e.getChild(0)),r=this.leftHandAccess(e.getChild(1)),i=e.value,s=w.getNode(i);switch(e.type){case v.types["=="]:t===r&&executeLine.next(s).value;break;case v.types["<>"]:t!==r&&executeLine.next(s).value;break;case v.types[">"]:t>r&&executeLine.next(s).value;break;case v.types["<"]:t<r&&executeLine.next(s).value;break;case v.types[">="]:t>=r&&executeLine.next(s).value;break;case v.types["<="]:t<=r&&executeLine.next(s).value}}async executeProgram(e){console.log("STARTING EXECUTION...");let t=null,r=!0,i=!1;for(w.reset();t=executeLine.next().value;)switch(r&&(w.labels.clear(),w.mapLabels(t),w.mapMethods(t),r=!1),this.lineByLine&&this.breakpoints.length>0?(i||(i=this.breakpoints[0]===t.getLine()))&&await this.stopLine(t.getLine()):this.stop&&!this.lineByLine&&(this.breakpoints.includes(t.getLine())&&await this.stopLine(t.getLine()),this.stop=this.breakpoints.length>0),t.type){case v.types.var:this.declarationStmt(t);break;case v.types.goto:this.jmpInconditionalStmt(t);break;case v.types["<"]:case v.types[">"]:case v.types["<="]:case v.types[">="]:case v.types["<>"]:case v.types["=="]:this.jmpConditionalStmt(t);break;case v.types["="]:this.assignment(t);break;case v.types.print:this.printStmt(t);break;case v.types.end:executeLine.next(w.lastNode());break;case v.types.call:w.insertInCallStack(t);const e=w.methods.get(t.value);executeLine.next(e.getChild(0))}console.log("EXECUTION FINISHED..."),window.dispatchEvent(new CustomEvent("snackbar-message",{detail:"interpreter has finished"})),window.dispatchEvent(new CustomEvent("finished"))}declarationStmt(e){for(let t=0;t<e.children.length;t++)11===e.getChild(t).type&&(w.createTemporary[e.getChild(t).value]=-1)}setBreakPoint(e){this.breakpoints=e}stopLine(e){return window.dispatchEvent(new CustomEvent("stopped",{detail:e})),new Promise((e,t)=>{this.onResolve=e,this.onReject=t})}};var C=r(67);class _ extends o.a{constructor(){super(),this.files={},window.addEventListener("stopped",e=>{this.started=1,this.highLight(e.detail)}),window.addEventListener("finished",()=>{this.started=0,this.debugged_line=-1}),window.addEventListener("run",()=>{0!==this.started&&this.debugg()}),this.breakPoints=[],this.started=0,this.debugged_line=0,this.parsed=!1,this.name="MainClass.j",this.src=""}static get styles(){return[s.d,s.f,u,o.b`
        .CodeMirror {
          border-top: 1px solid black;
        }

        .upload-btn-wrapper {
          grid-column: 1 / 3;
          border-bottom: 1px solid black;
          padding: 5px;
        }

        custom-accordion {
          margin: 20px;
          grid-column: 1 / 3;
        }

        :host {
          display: block;
          width: 95%;
          height: 100%;
          margin-left: 2.5%;
          transition: transform 250ms;
          box-shadow: var(--shadow-box-2dp-custom);
          background: white;
          border-radius: 5px;
          display: grid;
          grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
        }

        :host(:hover) {
          box-shadow: var(--shadow-box-8dp-custom);
        }

        textarea {
          height: 95%;
          width: 100%;
        }

        .upload-btn-wrapper {
          position: relative;
          overflow: hidden;
          display: inline-block;
        }

        .btn {
          border: 2px solid gray;
          color: gray;
          background-color: white;
          padding: 8px 20px;
          border-radius: 5px;
          font-size: 20px;
          font-weight: bold;
          cursor: pointer;
        }

        .upload-btn-wrapper input[type="file"] {
          font-size: 100px;
          position: absolute;
          width: 60px;
          height: 40px;
          top: 12px;
          left: 9px;
          opacity: 0;
          cursor: pointer;
        }

        paper-button {
          fill: black;
          border-radius: 5px;
          border: 2px solid grey;
        }

        .CodeMirror.cm-s-default {
          background: lightcyan;
          border-radius: 0 0 5px 5px;
          cursor: text;
        }

        .CodeMirror-gutter-elt {
          left: 0 !important;
        }

        .highlight-class {
          background: #00fff2 !important;
        }

        custom-switch {
          margin-left: 15%;
        }

        .overflowable {
          width: 100%;
        }

        .icon {
          width: 36px;
          height: 36px;
          display: block;
          padding: 5px;
          margin-left: 90%;
          border-radius: 100%;
          background: white;
          cursor: pointer;
          transition: 250ms all;
        }

        .icon:hover {
          fill: white;
          background: var(--dark-primary-color);
          box-shadow: var(--shadow-elevation-4dp);
        }

        pre {
          display: inline-block;
          width: calc(100% - 30px);
        }

        .lines {
          width: 25px;
        }
      `]}static get properties(){return{src:{type:String},code3D:{type:String},name:{type:String},breakPoints:{type:Array},started:{type:Number},debugged_line:{type:Number},temporary:{type:String},index:{type:Number},files:{type:Object},optCode:{type:String}}}firstUpdated(){this.editor=this._("pascaltext"),this.editor3D=this._("code3D"),window.Modal=this._("modal"),this.code_editor=g.a.fromTextArea(this.editor,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"javascript"}),this.code_editor_3D=g.a.fromTextArea(this.editor3D,{lineNumbers:!0,gutters:["CodeMirror-linenumbers","breakpoints"],matchBrackets:!0,mode:"javascript"}),this.code_editor_3D.on("gutterClick",(e,t)=>{const r=e.lineInfo(t);this.setBreakPoint(r.line,void 0===r.gutterMarkers),e.setGutterMarker(t,"breakpoints",r.gutterMarkers?null:this.makeMarker())}),this.code_editor.on("change",e=>{this.src=e.getValue(),""!==this.name&&void 0!==this.files[this.name]&&(this.files[this.name].src=this.src),this.dispatchEvent(new CustomEvent("editor-valor-cambio",{detail:e.getValue()}))}),this.code_editor_3D.on("change",e=>{this.codigo3D=e.getValue()}),this._("real-input").addEventListener("change",e=>{e.preventDefault();const t=new FileReader;t.addEventListener("load",e=>{const t=e.target.result;this.code_editor.setValue(t)}),t.readAsText(this._("real-input").files[0]),this.name=this._("real-input").files[0].name,this.dispatchEvent(new CustomEvent("name-changed",{detail:this.name}))})}render(){return o.c`
      <div class="upload-btn-wrapper" style="grid-column: 1 / 3;">
        <button class="btn"><span>${f.b}</span></button>
        <input type="file" name="myfile" id="real-input" />
        <paper-button @click="${this.translate}">${f.k}</paper-button>
        ${0===this.started?o.c`<paper-button @click="${this.interpret}"
              >${f.f}</paper-button
            >`:""}
        ${0!==this.started?o.c`<paper-button @click="${this.debugg}">
              ${1==this.started?f.c:f.j}</paper-button
            >`:""}
        <paper-button @click="${this.save}">${f.i}</paper-button>
        <paper-button @click="${this.refresh}">${f.h}</paper-button>
      </div>
      <div style="grid-column:1 / 3; border-bottom: 1px solid black;">
        ${this.debugged_line>0?"Current Line: "+this.debugged_line:""}
      </div>
      <div>
        <h3>MatrioshTS</h3>
        <textarea id="pascaltext"></textarea>
      </div>
      <div id="container-3D">
        <h3>Traduccion</h3>
        <textarea id="code3D"></textarea>
      </div>
      <custom-simple-modal id="modal"></custom-simple-modal>
    `}async translate(){window.limpiarTodo();let e=C.a.parse(this.src);e&&(console.log(e.ejecutar()),console.log(window.errores),window.errores.length>0?window.dispatchEvent(new CustomEvent("graficar-errores",{detail:window.errores})):(e.graficarArbol(),window.dispatchEvent(new CustomEvent("graficar-tree",{detail:window.strArbol}))))}sleep(e){return new Promise(t=>setTimeout(t,e))}setBreakPoint(e,t){if(t)this.breakPoints.push(e+1),this.breakPoints.sort();else{const t=this.breakPoints.indexOf(e+1);this.breakPoints.splice(t,1),this.breakPoints.sort(),k.setBreakPoint(this.breakPoints)}}makeMarker(){const e=document.createElement("div");return e.style.color="#822",e.innerHTML="●",e}set3D(e){this.codigo3D=e,this.code_editor_3D.setValue(e)}refresh(){this.breakPoints=[],k.setBreakPoint(this.breakPoints),Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class"))}highLight(e){const t=Array.from(this.$$$("#container-3D .CodeMirror-linenumber.CodeMirror-gutter-elt")).find(t=>Number(t.textContent)==e);t&&t.parentNode.parentNode.classList.add("highlight-class"),this.debugged_line=e}debugg(){this.started=1,Array.from(this.$$$(".highlight-class")).forEach(e=>e.classList.remove("highlight-class")),k.onResolve(!0)}graphViz(e){this.graph=`Digraph G {\n            ${e.writeNode()}\n        }`,this.fire("graphviz-generated",this.graph)}openFile(e){this.name=e,this.src=this.files[e].src,this.code_editor.setValue(this.src),this.requestUpdate()}setVarGlobal(){Backend.VarFlag=this._("varglobal").value()}copyToClipboard(){const e=document.createElement("textarea");e.value=this.optCode,document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}}customElements.define("editor-cql",_);const $=class extends o.a{_animation(e,t=null){if(this.disabled)return;let r=null!=e&&e.currentTarget.parentNode.parentNode||t;r.classList.toggle("active"),this.classList.toggle("active");let i=r.nextElementSibling;null!==i&&(i.classList.contains("hide")?i.classList.toggle("hide"):setTimeout(()=>i.classList.toggle("hide"),500),i.classList.toggle("chosen"))}close(e=null){let t=null!==e?e.currentTarget:this.$$(".accordion");this._animation(null,t)}open(){let e=this.disabled;this.disabled=!1,this.close(),this.disabled=e}};customElements.define("custom-accordion",class extends ${static get properties(){return{disabled:{type:Boolean}}}static get styles(){return[s.a,o.b`
                div:first-child {
                    width: 100%;
                    display: grid;
                    grid-template-columns: minmax(0,0.9fr) minmax(0,0.1fr);
                }

                div.panel{
                    background: var(--secondary-background-color);
                    width: 100%;
                    display: flex;
                    flex-direction: row;
                    flex-wrap: wrap;
                    align-items: center;
                    align-content: center;
                    justify-content: space-between;
                }

                button {
                    background: transparent;
                    border: none;
                    outline: none;
                    fill: var(--disabled-color);
                }

                .active span:first-child, span:nth-child(2){
                    display:none
                }

                .active span:nth-child(2), span:first-child{
                    display: block;
                }

                slot[name="title-box"]::slotted(label){ 
                    margin-left: 16px; 
                }

                @media (max-width:440px){
                    div:first-child {
                        grid-template-columns: minmax(0,0.75fr) minmax(0,0.25fr);
                    }
                }

                @media (max-width:840px){
                    div.panel {
                        flex-direction: column;
                        flex-wrap: initial;
                    }
                    
                    ::slotted(:last-child){
                        margin-bottom:12.5px;
                    }
                }

                :host([no-header]) div.panel{
                    border-radius: 5px;
                }
                
                :host([no-hover]) .accordion:hover, :host([no-hover]) .panel, :host([no-hover]) .accordion.active{
                    border-radius: 0;
                }
                
                :host([no-options]) .accordion{
                    display: none;
                }
                
                :host([no-shadow]) div.panel{
                    box-shadow: none;
                    background: transparent;
                    padding: 0;
                }`]}render(){return o.c`
            <div class="accordion">
                <slot name="title-box">
                </slot>
                <slot name="icons-box">
                    <button @click="${this._animation}">
                        <span>${f.g}</span>
                        <span>${f.e}</span>
                    </button>
                </slot>
            </div>
            <div class="panel chosen hide">
                <slot name="panel-box">
                <div style="text-align: center;">Nada que mostrar!</div>
                </slot>
            </div>
        `}constructor(){super(),this.disabled=!1}});class E extends o.a{constructor(){super(),window.File&&window.FileReader&&window.FileList&&window.Blob||alert("The File APIs are not fully supported in this browser."),this.output={}}static get styles(){return[o.b`
        :host {
          height: fit-content;
          display: block;
          padding: 25px;
          width: 100%;
        }

        input {
          margin: auto;
          display: block;
          outline: none;
        }

        .objects{
          cursor: pointer;
          margin-top: 10px;
        }

        .objects > div{
            background: var(--default-primary-color);
            padding: 5px;
            color: white;
        }

        .objects > div:first-child{
          border-top-left-radius: 5px;
          border-top-right-radius: 5px;
        }

        .objects > div:last-child{
          border-bottom-left-radius: 5px;
          border-bottom-right-radius: 5px;
        }

        .objects > div:hover{
          background: var(--accent-color);
          transition: 250 ease-in;
          font-size: 2em;
          height: 36px;
        }

        span{
          float: right;
          display:block;
          padding: 1px 8px;
          box-sizing: border-box;
        }

        span:hover{
          color: var(--accent-color);
          background: white;
          border-radius:5px;
          transition: 250 ease-in;
          font-weight: bolder;
        }
      `]}static get properties(){return{output:{type:Object}}}render(){return o.c`<input type="file" webkitdirectory="" directory="" @change=${this.handleFileSelect}>
                <div class="objects"> ${this.isObjectEmpty(this.output)?"":Object.keys(this.output).map(e=>o.c`
                    <div @dblclick=${this.openFile} key="${e}">
                      ${e}
                      <span @click=${this.deleteFile} key="${e}">X</span>
                    </div>`)}
                </div>`}deleteFile(e){delete this.output[e.currentTarget.getAttribute("key")],this.requestUpdate(),this.fire("update-import",this.output)}openFile(e){this.fire("open-file",e.currentTarget.getAttribute("key"))}handleFileSelect(e){const t=[],r=this;for(const i of Array.from(e.target.files))i.webkitRelativePath.includes(".j")&&(t.push(new FileReader),t[t.length-1].addEventListener("load",(function(e){const t=i.webkitRelativePath.split("/")[0];r.output[i.name.toLowerCase()]={src:e.target.result,relative:i.webkitRelativePath.split(t).join("."),name:i.name.toLowerCase().split(".")[0],parsed:!1},r.requestUpdate(),r.fire("update-import",r.output)})),t[t.length-1].readAsText(i))}}customElements.define("import-component",E);class S extends i.a{static get styles(){return[s.f,s.d,n,...super.styles,o.b`
        :host {
          --paper-tabs-selection-bar-color: var(--light-primary-color);
          --iron-icon-fill-color: var(--dark-primary-color);
        }

        custom-accordion {
          width: 95%;
          margin: auto;
          background: white;
          box-shadow: var(--shadow-box-2dp-custom);
          border-radius: 5px;
          margin: 5px auto;
        }

        textarea {
          background: blue;
          color: white;
          width: 100%;
          height: 1000px;
          outline: none;
          border: 0;
        }

        paper-tab.iron-selected {
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tab {
          width: 30%;
          max-width: 30%;
          min-width: 30%;
          background: var(--dark-primary-color);
          color: white;
          fill: white;
          border-radius: 5px 5px 0 0;
        }

        paper-tab:not(:last-child) {
          margin: 2px;
        }

        #plus-paper-tab {
          width: 50px;
          min-width: 50px;
          max-width: 50px;
        }

        paper-tab:hover {
          background: var(--accent-color);
          color: var(--light-primary-color);
          fill: var(--light-primary-color);
        }

        paper-tabs {
          width: 90% !important;
          margin: auto;
        }

        paper-tab span {
          position: absolute;
          right: 0;
          top: 11px;
        }
      `]}static get properties(){return{information:{type:Object},errors:{type:Array},graph:{type:String},blockgraph:{type:String},files:{type:Object},selected:{type:Number},windows:{type:Array},current:{type:Number}}}render(){return o.c`
      <custom-accordion id="import">
        <label style="line-height: 1.75;" slot="title-box"
          >Carpeta para importar</label
        >
        <import-component
          slot="panel-box"
          @update-import=${this.updateData}
          @open-file="${this.open}"
        ></import-component>
      </custom-accordion>
      <paper-tabs scrollable fit-container .selected="${this.selected}">
        ${this.windows.map((e,t)=>o.c`<paper-tab idx="${t}" @click="${this.selectTab}"
              >${e}${0===t?"":o.c`<span idx="${t}" @click=${this.close}
                    >${f.a}</span
                  >`}</paper-tab
            >`)}
        <paper-tab @click="${this.newTab}" id="plus-paper-tab"
          >${f.g}</paper-tab
        >
      </paper-tabs>
      <iron-pages .selected="${this.selected}">
        ${this.windows.map(e=>o.c`<editor-cql
            @info-setted="${this.setInfo}"
            @graphviz-generated="${this.changeGraph}"
            .files=${this.files}
            @blockgraph-generated="${this.changeBlockGraph}"
          ></editor-cql>`)}
      </iron-pages>
      <console-element
        .information=${this.information}
        .errors="${this.errors}"
        .graph="${this.graph}"
        .blockgraph="${this.blockgraph}"
      ></console-element>
    `}updateData(e){this.files=e.detail,this.requestUpdate()}open(e){this.$$$("editor-cql")[this.selected].openFile(e.detail)}setInfo(e){this.information=e.detail.symtab,this.errors=e.detail.errors,this.requestUpdate()}selectTab(e){this.selected=Number(e.currentTarget.getAttribute("idx"))}newTab(){this.windows.push(`New${this.current++}.ts`),this.requestUpdate()}constructor(){super(),this.information={},this.files={},this.errors=[],this.graph="",this.selected=0,this.windows=["New0.j"],this.current=1}changeGraph(e){this.graph=e.detail}changeBlockGraph(e){this.blockgraph=e.detail}close(e){e.preventDefault(),this.windows.splice(Number(e.currentTarget.getAttribute("idx")),1),setTimeout(()=>{this.selected=this.windows.length-1},250)}}window.customElements.define("primary-view",S)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,